<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ksmart.mybatis.member.mapper.MemberMapper">

    <resultMap id="memberResultMap" type="Member">
        <id     column="m_id"       property="memberId"/>
        <result column="m_pw"       property="memberPassword"/>
        <result column="m_name"     property="memberName"/>
        <result column="m_level"    property="memberLevel"/>
        <result column="m_email"    property="memberEmail"/>
        <result column="m_addr"     property="memberAddr"/>
        <result column="m_reg_date" property="memberRegDate"/>
        <!-- goods 테이블 1:N 관계 -->
        <collection property="goodsList" javaType="arraylist" ofType="goods">
            <id     column="g_code"      property="goodsCode"/>
            <result column="g_name"      property="goodsName"/>
            <result column="g_price"     property="goodsPrice"/>
            <result column="g_seller_id" property="goodsSellerId"/>
            <result column="g_reg_date"  property="goodsRegDate"/>
        </collection>
    </resultMap>

    <resultMap id="memberLevelResultMap" type="Member">
        <id     column="level_num"  property="memberLevel"/>
        <result column="level_name" property="memberLevelName"/>

    </resultMap>
    <insert id="addMember" parameterType="Member">
        /* 회원등록 */
        INSERT INTO tb_member
            (m_id, m_pw, m_level, m_name, m_email, m_addr, m_reg_date)
        VALUES (#{memberId}, #{memberPw}, #{memberLevel}, #{memberName}, #{memberEmail}, #{memberAddr}, CURDATE());
    </insert>
    <!--<insert id="insertMember" parameterType="Member">
        insert into
            tb_member(
                m_id,
                m_pw,
                m_name,
                m_level,
                m_email,
                m_addr,
                m_reg_date
        )
        VALUES(
            #{memberId},
            #{memberPassword},
            #{memberName},
            #{memberLevel},
            #{memberEmail},
            #{memberAddr},
            CURRENT_DATE);
    </insert>-->
    <insert id="insertMember" parameterType="Member">
        /* salt 를 추가한 후 db에 입력 */
    insert into
        tb_member2(
            m_id,
            m_pw,
            m_name,
            m_level,
            m_email,
            m_addr,
            salt,
            m_reg_date)
        VALUES (
            #{memberId},
            #{memberPassword},
            #{memberName},
            #{memberLevel},
            #{memberEmail},
            #{memberAddr},
            #{salt},
            CURRENT_DATE);
    </insert>
    <update id="updateMember" parameterType="Member">
        /* 회원 정보 수정 처리 */
        update
            tb_member
        set
            m_pw = #{memberPassword},
            m_name = #{memberName},
            m_level = #{memberLevel},
            m_email = #{memberEmail},
            m_addr = #{memberAddr}
        where
            m_id = #{memberId};
    </update>
    <update id="modifyMember" parameterType="Member">
        /* 회원 정보 수정 처리 동적 쿼리로 수정 */
        update
            tb_member
            <trim prefix="set" suffixOverrides=",">
                <if test="memberPassword != null and memberPassword != ''">
                    m_pw = #{memberPassword},
                </if>
                <if test="memberLevel > 0">
                    m_level = #{memberLevel},
                </if>
                <if test="memberName != null and memberName != ''">
                    m_name = #{memberName},
                </if>
                <if test="memberEmail != null and memberEmail != ''">
                    m_email = #{memberEmail},
                </if>
                <if test="memberAddr != null and memberAddr != ''">
                    m_addr = #{memberAddr},
                </if>
            </trim>
        where
            m_id = #{memberId};
    </update>
    <delete id="removeOrderByCode" parameterType="string">
        /* 판매자: 주문이력삭제(상품코드) */
        delete
            o
        from
            tb_goods AS g
            INNER JOIN
            tb_order AS o
            ON
            g.g_code = o.o_g_code
        where
            g.g_seller_id = #{sellerId};
    </delete>
    <delete id="removeGoodsById" parameterType="string">
        /* 판매자: 상품삭제 */
        delete
        from tb_goods
        where
            g_seller_id = #{sellerId};
    </delete>
    <delete id="removeOrderById" parameterType="string">
        /* 구매자: 주문이력삭제(구매자아이디)*/
        delete
        from
            tb_order
        where
            o_id = #{orderId};
    </delete>
    <delete id="removeLoginHistoryById" parameterType="string">
        /* 모든회원: 로그인 이력 삭제*/
        delete
        from
            tb_login
        where
            login_id = #{loginId};
    </delete>
    <delete id="removeMemberById" parameterType="string">
        /* 모든회원: 회원 탈퇴 */
        delete
        from tb_member
        where
            m_id = #{memberId};
    </delete>

    <select id="getMemberList" resultMap="memberResultMap">
    /* 전체 회원 정보 목록 조회 */
    select
        m_id,
        m_pw,
        m_name,
        m_level,
        m_email,
        m_addr,
        m_reg_date
    from
        tb_member;
</select>
    <select id="getMemberList2" resultMap="memberResultMap">
        /* 전체 회원 정보 목록 조회 */
        select
            m_id,
            m_pw,
            m_name,
            m_level,
            m_email,
            m_addr,
            salt,
            m_reg_date
        from
            tb_member2;
    </select>
    <select id="getMemberLevelList" resultMap="memberLevelResultMap">
        /* 회원 등급 조회 */
        select
            level_num,
            level_name
        from
            tb_member_level;
    </select>
    <select id="memberIdCheck" parameterType="string" resultType="boolean">
        /* 회원 아이디가 중복되는지 확인 */
        select
            count(m_id)
        from
            tb_member
        where
            m_id = #{memberId}
    </select>
    <select id="getMemberInfoById" parameterType="string" resultType="Member" resultMap="memberResultMap">
        /* 회원 아이디와 일치하는 회원 정보 확인 */
        select
            m_id,
            m_pw,
            m_name,
            m_level,
            m_email,
            m_addr,
            m_reg_date
        from
            tb_member
        where
            m_id = #{memberId};
    </select>
    <select id="getSellerList" resultMap="memberResultMap" fetchSize="50">
        /* 판매자 현황 조회 */
        SELECT
            m.m_id,
            m.m_name,
            m.m_email,
            g.g_code,
            g.g_name,
            g.g_price,
            g.g_reg_date
        FROM
            tb_member AS m
            LEFT JOIN
            tb_goods AS g
            ON
            m.m_id = g.g_seller_id
        WHERE
            m.m_level = 2;

    </select>
</mapper>